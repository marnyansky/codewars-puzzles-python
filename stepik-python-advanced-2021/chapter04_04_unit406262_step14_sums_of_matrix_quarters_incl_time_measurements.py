"""
https://stepik.org/lesson/416754/step/14?unit=406262
Квадратная матрица разбивается на четыре четверти, ограниченные главной и побочной диагоналями:
верхнюю, нижнюю, левую и правую. Напишите программу, которая вычисляет сумму элементов:
верхней четверти; правой четверти; нижней четверти; левой четверти.
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице,
затем элементы матрицы (целые числа) построчно через пробел.
Программа должна вывести текст в соответствии с условием задачи. Элементы диагоналей не учитываются.
"""

import time

from timeit import default_timer as timer
from exec_time import display_function_execution_time as elapsed


class Solution:

    @property
    def quarters(self):
        return ['Верхняя четверть: ',
                'Правая четверть: ',
                'Нижняя четверть: ',
                'Левая четверть: ']


    def _prepare_result(self, *args):
        res = ''
        if not args or len(args) < 4:
            for q in self.quarters:
                res += q + '0\n'
            return res.strip()

        for i in range(len(self.quarters)):
            res += self.quarters[i] + f'{args[i+1]}\n'
        return res.strip()


    def calc_per_quarter(self, n, matrix):
        if n < 3:
            return self._prepare_result(self)

        sum_upr, sum_rgt, sum_lwr, sum_lft = 0, 0, 0, 0

        for i in range(n):
            for j in range(n):
                if i < j and i < n-1-j:
                    sum_upr += matrix[i][j]
                elif i > j and i < n-1-j:
                    sum_lft += matrix[i][j]
                elif i < j and i > n-1-j:
                    sum_rgt += matrix[i][j]
                elif i > j and i > n-1-j:
                    sum_lwr += matrix[i][j]

        return self._prepare_result(self, sum_upr, sum_rgt, sum_lwr, sum_lft)
        # the end of my solution

    def calc_per_quarter_alt1(self, n, matrix):
        sums = [0] * 4
        quarters = ('Верхняя', 'Правая', 'Нижняя', 'Левая')
        for i in range(n // 2):
            for j in range(i + 1, n - i - 1):
                for k, e in enumerate((matrix[i][j], matrix[j][~i], matrix[~i][j], matrix[j][i])):
                    sums[k] += e

        print(*(f'{q} четверть: {sums[i]}' for i, q in enumerate(quarters)), sep='\n')


    def calc_per_quarter_alt2(self, n, matrix):
        quarters = {
            'Верхняя четверть': lambda i, j: j > i < n - 1 - j,
            'Правая четверть': lambda i, j: j > i > n - 1 - j,
            'Нижняя четверть': lambda i, j: j < i > n - 1 - j,
            'Левая четверть': lambda i, j: j < i < n - 1 - j,
        }

        for qr, f in quarters.items():
            print(f'{qr}: {sum(matrix[i][j] for i in range(n) for j in range(n) if f(i, j))}')


# algorithms' efficiency measurements
if __name__ == '__main__':

    matrix_32x32 = [
        [1724, 1548, 1244, 2675, 2236, 629, 2204, 2576, 1079, 358, 229, 3647, 3413, 737, 1487, 2509, 1582, 3494, 214,
        375, 1195, 2486, 2865, 495, 321, 4009, 1440, 3996, 3289, 2264, 3598, 859],
        [411, 715, 2174, 3658, 473, 2336, 2793, 4072, 3944, 2929, 2631, 1557, 2608, 1963, 779, 3827, 214, 3071, 1766,
        2597, 1674, 3924, 3847, 2868, 813, 1888, 2926, 4015, 462, 208, 2229, 2950],
        [2814, 3897, 1622, 733, 2560, 1082, 2220, 3967, 4000, 3432, 1286, 213, 792, 3138, 3414, 1258, 2661, 1647, 2856,
        634, 2939, 3013, 3165, 55, 3313, 349, 1323, 125, 2607, 97, 3178, 34],
        [2162, 959, 514, 3608, 3152, 1003, 2038, 1256, 1888, 441, 2754, 1954, 551, 382, 536, 2274, 586, 3419, 3562, 1756,
        1403, 3306, 3491, 2809, 4092, 2980, 1935, 3468, 938, 2155, 2408, 1712],
        [2850, 1259, 3038, 446, 1515, 1882, 3995, 2897, 395, 3213, 852, 98, 1335, 3515, 3988, 2756, 1527, 2216, 299,
        2813, 3771, 2814, 2298, 2224, 2110, 2235, 3442, 2140, 2927, 173, 4095, 2115],
        [1645, 3926, 1519, 1106, 2712, 3844, 1222, 2575, 1259, 2372, 4005, 418, 211, 2438, 2945, 220, 1382, 1681, 333,
        2583, 1567, 96, 2045, 1695, 278, 2807, 3968, 270, 3749, 3664, 1016, 959],
        [136, 497, 2489, 952, 2300, 3494, 2418, 3605, 148, 2360, 1981, 336, 2475, 3017, 3397, 1451, 2538, 1210, 103,
        2657, 2477, 3697, 3, 2079, 1557, 3908, 1144, 2087, 348, 1544, 2965, 2265],
        [3416, 1795, 1050, 2479, 1157, 2247, 1743, 1678, 3430, 485, 2797, 3822, 3682, 1791, 397, 1311, 3740, 783, 2811,
        20, 3821, 3785, 3738, 3485, 2172, 713, 3682, 1389, 3412, 2622, 411, 3699],
        [1540, 1059, 127, 2662, 2505, 2383, 1499, 1873, 238, 2812, 2646, 2423, 3952, 2165, 1630, 3515, 1932, 2891, 2016,
        1724, 1204, 2437, 1414, 3353, 440, 3757, 2857, 2998, 3810, 2226, 2644, 1751],
        [2457, 2157, 724, 3800, 2974, 150, 2700, 1926, 3756, 4083, 3634, 3053, 2441, 1439, 3363, 2363, 1718, 2080, 2801,
        3806, 2915, 668, 1175, 3063, 1786, 3865, 3976, 953, 1312, 3513, 2142, 167],
        [3500, 23, 1113, 3364, 985, 1810, 530, 1805, 2684, 754, 1078, 746, 3604, 643, 3945, 3169, 2768, 2109, 1353, 3752,
        1733, 1520, 808, 412, 74, 2055, 1521, 2983, 1879, 3368, 3715, 2036],
        [174, 3591, 1786, 1214, 3331, 2997, 741, 3176, 10, 969, 1343, 1920, 491, 2167, 84, 389, 571, 891, 4089, 2300,
        569, 1304, 564, 3829, 3541, 612, 2761, 3189, 1375, 21, 2035, 3056],
        [251, 3934, 1271, 1380, 3629, 2490, 2826, 2021, 3234, 1181, 1174, 1998, 874, 572, 3671, 419, 1326, 3988, 893,
        917, 1008, 3018, 4070, 480, 2882, 1597, 3139, 2997, 5, 3244, 3271, 2593],
        [3172, 1717, 1758, 210, 1402, 1568, 1012, 3845, 1875, 1461, 3049, 3841, 1918, 1255, 1705, 3558, 3038, 2267, 3901,
        1038, 4038, 2223, 3178, 1804, 2986, 180, 3675, 1314, 182, 61, 4048, 556],
        [260, 403, 2092, 2293, 2175, 3805, 2978, 186, 2725, 2059, 3925, 501, 1175, 81, 2, 1786, 2978, 644, 867, 4, 2995,
        1669, 2544, 3327, 2954, 1828, 1926, 3898, 582, 3046, 2030, 2705],
        [2837, 1927, 1479, 2765, 2522, 1441, 1711, 1158, 2409, 179, 2481, 3809, 1597, 1972, 2907, 3840, 497, 1223, 297,
        2325, 912, 2605, 1400, 2228, 3138, 1592, 698, 3288, 3402, 1381, 2688, 673],
        [2090, 2944, 1241, 3398, 1897, 1877, 1899, 3364, 3942, 347, 2767, 1807, 3465, 2235, 2692, 913, 551, 995, 567,
        1794, 283, 3590, 3884, 617, 2300, 279, 3959, 3600, 2385, 3812, 530, 4031],
        [86, 3463, 3983, 2333, 255, 1201, 3526, 2711, 2941, 796, 3069, 3624, 2160, 3704, 1018, 2650, 1168, 3248, 3078,
        1796, 2988, 78, 3402, 2616, 3257, 1393, 3744, 875, 650, 4005, 1633, 3411],
        [2294, 2446, 3174, 215, 1772, 2285, 2653, 2644, 1206, 130, 2140, 3119, 1439, 2659, 1752, 3859, 820, 456, 3378,
        1899, 827, 3041, 1093, 2678, 4074, 3530, 2010, 264, 1134, 2685, 3397, 238],
        [3932, 95, 1569, 1324, 1248, 148, 3309, 2155, 1772, 2084, 3077, 892, 813, 1468, 2982, 635, 3246, 3092, 3576,
        3296, 255, 2445, 2975, 1194, 1962, 3459, 1701, 2491, 2281, 3505, 608, 3731],
        [1930, 2143, 3388, 2148, 426, 640, 3842, 4013, 3764, 3959, 359, 2895, 2516, 1884, 2881, 2698, 3575, 3303, 3355,
        1357, 3831, 3678, 1148, 2815, 1172, 1761, 1012, 1512, 977, 3226, 3297, 1392],
        [2886, 2509, 243, 3737, 2116, 2758, 3295, 1842, 2425, 1342, 1982, 2321, 295, 2796, 1720, 3929, 1126, 1356, 3522,
        2648, 3835, 633, 2921, 2645, 2703, 2906, 1302, 109, 248, 461, 3804, 529],
        [2683, 3575, 1953, 3957, 3977, 2173, 254, 219, 509, 1311, 722, 2266, 2396, 3461, 2054, 2460, 3658, 3298, 561,
        828, 1040, 222, 195, 1188, 3743, 1139, 25, 890, 2058, 3220, 3072, 1914],
        [1091, 3435, 3586, 3401, 242, 79, 2710, 1807, 1974, 3147, 1586, 551, 856, 2433, 2280, 260, 232, 3550, 2704, 2234,
        3660, 3136, 2184, 2101, 1323, 3305, 2896, 3047, 3695, 1309, 1736, 3513],
        [2419, 2621, 576, 3246, 351, 3929, 2409, 686, 547, 3543, 230, 1044, 2436, 2176, 147, 4010, 3978, 931, 304, 2564,
        1073, 3059, 1317, 2792, 424, 3048, 3231, 776, 2044, 396, 75, 1969],
        [2275, 876, 2075, 2885, 3979, 3655, 3412, 2264, 2462, 2889, 1869, 3741, 629, 993, 1940, 3195, 3856, 531, 2931,
        3811, 3108, 986, 1885, 3479, 291, 380, 3598, 3090, 2921, 891, 3106, 1523],
        [1613, 1312, 1552, 2115, 239, 222, 2223, 3300, 2057, 1491, 4021, 672, 2562, 1797, 1819, 635, 362, 3740, 1506,
        2681, 2508, 1281, 1119, 1470, 3329, 1335, 860, 1041, 1985, 1517, 485, 1333],
        [1268, 3990, 3748, 857, 688, 2017, 3558, 734, 2959, 1667, 3162, 369, 3568, 1370, 1377, 218, 115, 1076, 592, 998,
        3217, 3240, 3153, 1551, 945, 2034, 1257, 252, 680, 1929, 3541, 2869],
        [2453, 241, 3279, 4049, 1462, 2621, 3963, 3238, 1788, 379, 921, 240, 1162, 3452, 374, 2164, 446, 300, 3893, 3966,
        2102, 418, 3746, 3895, 1276, 1060, 1633, 1333, 359, 1140, 3512, 2955],
        [2630, 1727, 1562, 2057, 783, 3869, 3554, 1613, 3513, 1811, 1411, 3112, 899, 3402, 1425, 2925, 399, 1613, 1182,
        2550, 1177, 2364, 3331, 2869, 3855, 2413, 3471, 1775, 2126, 2047, 3147, 3417],
        [283, 1266, 2140, 3861, 3042, 757, 679, 1656, 3764, 1669, 951, 678, 252, 37, 2043, 3516, 788, 2206, 683, 3071,
        2448, 3635, 3842, 3729, 3764, 1883, 470, 2943, 3081, 2079, 813, 2653],
        [2300, 3436, 1678, 3778, 3398, 4035, 2295, 3897, 3739, 3971, 3605, 4027, 2441, 920, 2879, 949, 4051, 3637, 327,
        806, 3563, 295, 581, 1263, 516, 2461, 1150, 1245, 1321, 2108, 3035, 3199]
    ]


    print('= = My solution: = =')
    time.sleep(0.5)
    time_s = timer()
    solution = Solution()
    print(solution.calc_per_quarter(32, matrix_32x32))
    time_f = timer()
    elapsed(time_s, time_f, function_name="calc_per_quarter()")

    print('\n= = Alternative solution #1: = =')
    time.sleep(0.5)
    time_s = timer()
    solution = Solution()
    solution.calc_per_quarter_alt1(32, matrix_32x32)
    time_f = timer()
    elapsed(time_s, time_f, function_name="calc_per_quarter_alt1()")

    print('\n= = Alternative solution #2: = =')
    time.sleep(0.5)
    time_s = timer()
    solution = Solution()
    solution.calc_per_quarter_alt2(32, matrix_32x32)
    time_f = timer()
    elapsed(time_s, time_f, function_name="calc_per_quarter_alt2()")
